# Activate virtual environment
. venv/bin/activate || {
    echo "Failed to activate virtual environment. Make sure venv exists and is properly set up."
    exit 1
}

# Run pytest
pytest || {
    echo "Tests failed. Please fix failing tests before committing."
    exit 1
}

# Get all staged Python files, if none, exit
STAGED_FILES=$(git diff --cached --name-only --diff-filter=d | grep ".py$" || true)

# Add debugging
echo "Staged files: $STAGED_FILES"

if [ -n "$STAGED_FILES" ]; then
    echo "Running Python formatters on staged files..."
    
    # Run autopep8 to fix Flake8 issues
    echo "Running autopep8..."
    autopep8 --in-place --aggressive --aggressive $STAGED_FILES || {
        echo "autopep8 failed to run. Please check if it's installed correctly."
        exit 1
    }
    
    # Run Ruff
    echo "Running Ruff..."
    ruff check $STAGED_FILES || {
        echo "Ruff check failed. Please fix the issues manually."
        exit 1
    }

    # Run Ruff autofix
    echo "Running Ruff autofix..."
    ruff format $STAGED_FILES || {
        echo "Ruff format failed. Please check if Ruff is installed correctly."
        exit 1
    }

    # Run Black formatter
    echo "Running Black..."
    black $STAGED_FILES || {
        echo "Black formatting failed. Please fix formatting issues manually."
        exit 1
    }
    
    # Run isort
    echo "Running isort..."
    isort $STAGED_FILES || {
        echo "isort failed. Please check import ordering manually."
        exit 1
    }
    
    # After formatting, re-stage the files
    for file in $STAGED_FILES; do
        if [ -f "$file" ]; then
            git add "$file" || {
                echo "Failed to stage $file. Please check file permissions and git status."
                exit 1
            }
        fi
    done
    
    # Run Flake8 check for any remaining issues
    echo "Running final Flake8 check..."
    flake8 $STAGED_FILES || {
        echo "Some Flake8 issues couldn't be fixed automatically. Please fix them manually."
        exit 1
    }

    # Run pylint to check for import errors
    echo "Running pylint import checks..."
    pylint $STAGED_FILES --disable=all --enable=E0401 || {
        echo "Pylint found import errors. Please fix the missing imports."
        exit 1
    }
fi